@page "/OpretVagt"
@using OrganicFest.Shared
@using OrganicFest0.Client.Services
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavManager
@inject IVagtService VagtService
@inject IJobService JobService

<PageTitle>Tilføj Vagter</PageTitle>

<h1>TILFØJ VAGTER</h1>

<EditForm Model="vagt" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="Jobnavn" class="bold-label"> Job :</label>
        <select @bind="vagt.Jobnavn" class="form-control">
            <option value=""> ---- Vælg job her ----- </option>
            @if (jobs == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var job in jobs)
                {
                    <option value="@job.Jobnavn">@job.Jobnavn</option>
                }
            }
        </select>
    </div>

    <div class="col-md-12 mb-6">
        <label for="Beskrivelse">Beskrivelse</label>
        <InputText id="Beskrivelse" @bind-Value="vagt.Description" class="form-control" style="height: 150px;" required />
    </div>
    <div class="col-md-6 mb-3">
        <label for="StartDateTime">Start DateTime</label>
        <input type="datetime-local" id="StartDateTime" @bind="vagt.Startdate" class="form-control" required />
    </div>

    <div class="col-md-6 mb-3">
        <label for="EndDateTime">End DateTime</label>
        <input type="datetime-local" id="EndDateTime" @bind="vagt.Enddate" class="form-control" required />
    </div>

    <div>
        <label for="Priotering" class="bold-label"> Prioteret :</label>
        <select @bind="vagt.PriorityAsString" class="form-control">
            <option value=""> ---- Vælg prioteret her ----- </option>
            <option value="True">Ja</option>
            <option value="False">Nej</option>
        </select>
    </div>

    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Tilføj</button>
    </div>
</EditForm>

@code {
    private string busyDisplayStyle = "none";
    private Vagt vagt = new Vagt();
    private List<Job> jobs = new List<Job>();

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await localStore.GetItemAsync<Frivillig>("loggedInUser");
        if (currentUser == null)
            NavManager.NavigateTo("/login");

        busyDisplayStyle = "block";
        jobs = (await JobService.GetAllJobs()).ToList();
        busyDisplayStyle = "none";
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await VagtService.AddVagt(vagt);
            vagt = new Vagt();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }
}
