@page "/Login"
@using OrganicFest.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject HttpClient Http
@inject NavigationManager NavManager

<h1>Login</h1>

<EditForm Model="frivillig" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Email">Email:</label>
        <InputText id="Email" @bind-Value="frivillig.Email" class="form-control" required />
    </div>

    <div class="mb-3">
        <label for="Password">Password:</label>
        <InputText id="Password" @bind-Value="frivillig.Password" type="password" class="form-control" required />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <p>Not registered yet? <NavLink href="/OpretFrivillig">Click here</NavLink></p>
</EditForm>

@code {
    private Frivillig frivillig = new Frivillig();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<Frivillig>("api/frivillig/login", frivillig);

            if (response.IsSuccessStatusCode)
            {
                var loggedInUser = await response.Content.ReadFromJsonAsync<Frivillig>();
                await localStore.SetItemAsync("loggedInUser", loggedInUser);
                NavManager.NavigateTo("/Frivillig");
            }
            else
            {
                errorMessage = "Incorrect email or password.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }
}
