@page "/Frivillig"
@using OrganicFest.Client.Services
@using OrganicFest.Shared
@inject IVagtService VagtService
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavManager

<div class="container-fluid">
    <h1>Velkommen, @bruger?.Name</h1>
    <h3>Du kan her vælge dine vagter</h3>

    <p>Se Profil  <NavLink href="/minprofil">Se din profil her</NavLink></p>
    <div class="mb-3">
        <button class="btn btn-warning" @onclick="HandleLogout">Log ud</button>
    </div>



    <div class="row">

        <!-- Venstre Boks -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4>Alle Vagter</h4>

                    @if (vagtList == null)
                    {
                        <p>Loading...</p>
                    }
                    else if (vagtList.Count == 0)
                    {
                        <p>Ingen vagter fundet.</p>
                    }
                    else
                    {
                        @foreach (var vagt in vagtList.Where(v => v.FID == 0))
                        {
                            <div class="mb-3">
                                <strong>Jobnavn:</strong> @vagt.Jobnavn<br />
                                <strong>Beskrivelse:</strong> @vagt.Description<br />
                                <strong>StartDate:</strong> @vagt.Startdate<br />
                                <strong>EndDate:</strong> @vagt.Enddate<br />
                                <strong>Priority:</strong> <p class="@GetPriorityClass(vagt.Priority)">@GetPriorityText(vagt.Priority)</p> <br />
                                <button class="btn btn-sm btn-success" @onclick="() => AddVagtToRightBox(vagt)">Tilføj</button>
                            </div>
                            <hr />
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Højre Boks -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4>Mine Vagter</h4>
                    <!-- Vis Vagter som er added til højre boks -->
                    <ul>
                        @foreach (var vagt in mineVagter.Where(v => v.FID == bruger.FID))
                        {
                            <div class="mb-3">
                                <strong>FrivilligID:</strong> @vagt.FID<br />
                                <strong>Jobnavn:</strong> @vagt.Jobnavn<br />
                                <strong>Beksirvelse:</strong> @vagt.Description<br />
                                <strong>StartDate:</strong> @vagt.Startdate<br />
                                <strong>EndDate:</strong> @vagt.Enddate<br />
                                <button class="btn btn-sm btn-success" @onclick="() => FjernVagtFromRightBox(vagt)">Fjern</button>
                            </div>
                            <hr />
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Vagt> vagtList = new List<Vagt>();
    private List<Vagt> mineVagter = new List<Vagt>();
    private Bruger bruger;
    private string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        bruger = await localStore.GetItemAsync<Bruger>("loggedInUser");

        if (bruger == null)
            NavManager.NavigateTo("/login");
        else
        {
            // Brug VagtService til at få alle vagter
            var allVagts = (await VagtService.GetAllVagts());
            vagtList = allVagts.OrderByDescending(vagt => vagt.Priority).ToList();
            mineVagter = allVagts.OrderByDescending(vagt => vagt.Startdate).ToList();
        }
    }

    private async Task AddVagtToRightBox(Vagt vagt)
    {
        var updatedMineVagter = (await VagtService.GetAllVagts()).Where(v => v.FID == bruger.FID).ToList();

        if (!HasOverlap(vagt, updatedMineVagter))
        {
            vagt.FID = bruger.FID;
            await VagtService.UpdateVagt(vagt);
            errorMessage = null;
        }
        else
        {
            errorMessage = "Du har allerede vagt denne dag";
        }
    }

    private bool HasOverlap(Vagt newVagt, List<Vagt> existingVagter)
    {
        return existingVagter.Any(v => v.Startdate <= newVagt.Enddate && v.Enddate >= newVagt.Startdate);
    }

    private async Task FjernVagtFromRightBox(Vagt vagt)
    {
        vagt.FID = 0;
        await VagtService.UpdateVagt(vagt);
    }

    private string GetPriorityClass(bool? priority)
    {
        if (priority.HasValue)
        {
            return priority.Value ? "priority" : "";
        }

        return "";
    }

    private string GetPriorityText(bool? priority)
    {
        if (priority.HasValue)
        {
            return priority.Value ? "Prioriteret" : "Ikke Prioriteret";
        }
        return "Vagt opretet uden om systemet";

    }
    private void HandleLogout()
    {
        localStore.RemoveItemAsync("loggedInUser");
        NavManager.NavigateTo("/login");
    }
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}