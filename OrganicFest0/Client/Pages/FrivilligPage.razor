@page "/Frivillig"
@using OrganicFest.Client.Services
@using OrganicFest.Shared
@inject IVagtService VagtService
@inject IAfdelingService AfdelingService
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavManager

<div class="container-fluid">
    <h1>Velkommen, @bruger?.Name</h1>
    <h3>Du kan her vælge dine vagter</h3>

    <p>Se Profil  <NavLink href="/minprofil">Se din profil her</NavLink></p>

    <div class="mb-3">
        <button class="btn btn-warning" @onclick="HandleLogout">Log ud</button>
    </div>

    <div class="mb-3">
        <label for="afdelingsfilter" class="form-label">Vælg Afdeling:</label>
        <select id="afdelingsfilter" @onchange="(e) => FilterByAfdelingsNavn(e)" class="form-select" style="width: 300px;">
            <option value="">Sorter efter Afdelingsnavn</option>
            @foreach (var afdeling in afdelingsnavne)
            {
                <option value="@afdeling.Afdelingsnavn">@afdeling.Afdelingsnavn</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <div class="row">

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4>Alle Vagter</h4>

                    @if (vagtList == null)
                    {
                        <p>Loading...</p>
                    }
                    else if (vagtList.Count == 0)
                    {
                        <p>Ingen vagter tilgængelige.</p>
                    }
                    else
                    {
                        @foreach (var vagt in vagtList.Where(v => v.FID == 0))
                        {
                            <div class="mb-3">
                                <strong>Afdelingsnavn:</strong> @vagt.Afdelingsnavn<br />
                                <strong>Beskrivelse:</strong> @vagt.Beskrivelse<br />
                                <strong>StartDate:</strong> @vagt.Startdate<br />
                                <strong>EndDate:</strong> @vagt.Enddate<br />
                                <strong>Priority:</strong> <p class="@GetPriorityClass(vagt.Priority)">@GetPriorityText(vagt.Priority)</p> <br />
                                <button class="btn btn-sm btn-success" @onclick="() => AddVagtToRightBox(vagt)">Tilføj</button>
                            </div>
                            <hr />
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4>Mine Vagter</h4>
                    <ul>
                        @foreach (var vagt in mineVagter.Where(v => v.FID == bruger.FID))
                        {
                            <div class="mb-3">
                                <strong>FrivilligID:</strong> @vagt.FID<br />
                                <strong>Afdelingsnavn:</strong> @vagt.Afdelingsnavn<br />
                                <strong>Beksirvelse:</strong> @vagt.Beskrivelse<br />
                                <strong>StartDate:</strong> @vagt.Startdate<br />
                                <strong>EndDate:</strong> @vagt.Enddate<br />
                                <button class="btn btn-sm btn-success" @onclick="() => FjernVagtFromRightBox(vagt)">Fjern</button>
                            </div>
                            <hr />
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    // Objekt for alle vagter som referes til i venstre boks 
    private List<Vagt> vagtList = new List<Vagt>();

    // Objekt for alle vagter som referes til i  højre boks
    private List<Vagt> mineVagter = new List<Vagt>();

    // Objekt som gør at bruger er husket når loggede ind
    private Bruger bruger;

    // Style for fejlmeddelse når en vagt Overlapper
    private string errorMessage;

    // Objekt for alle afdelinger som kan filter i afdelingsnavne - Se FilterByAfdelingsNavn
    private List<Afdeling> afdelingsnavne = new ();

    // Sender alle vagter ud på siden når man åbner den, og sikre at bruger er logget ind
    protected override async Task OnInitializedAsync()
    {
        bruger = await localStore.GetItemAsync<Bruger>("loggedInUser");
        afdelingsnavne = (await AfdelingService.GetAllAfdelinger()).ToList();

        if (bruger == null)
            NavManager.NavigateTo("/login");
        else
        {
            var allVagts = (await VagtService.GetAllVagts());
            vagtList = allVagts.OrderByDescending(vagt => vagt.Priority).ToList();
            mineVagter = allVagts.OrderBy(vagt => vagt.Startdate).ToList();

        }
    }

    // Gør at vagt for tilkoblet brugers FID, udfra hvem der er logget får vagten - Se knap AddVagtToRightBox
    // og sikre at du ikke tager vagter som overlapper ens egne ellers får man style ErrorMessage.
    private async Task AddVagtToRightBox(Vagt vagt)
    {
        var LoggedInUserVagter = (await VagtService.GetAllVagts()).Where(v => v.FID == bruger.FID).ToList();

        if (!HasOverlap(vagt, LoggedInUserVagter))
        {
            vagt.FID = bruger.FID;
            await VagtService.UpdateVagt(vagt);
            errorMessage = null;
        }
        else
        {
            errorMessage = "Du har allerede vagt denne dag";
        }
    }

    // En boolean der holder styr på om der er overlap på en LoggedInUsers vagter og den nye vagt de forsøger at tage.
    // Se AddVagtToRightBox
    private bool HasOverlap(Vagt newVagt, List<Vagt> LoggedInUserVagter)
    {
        return LoggedInUserVagter.Any(v => v.Startdate <= newVagt.Enddate && v.Enddate >= newVagt.Startdate);
    }

    // Gør at man ved at vælge på DropdownMenuen "FilterByAfdelingsNavn"
    // kan vælge hvilken afdeling man kun vil se vagter
    private async Task FilterByAfdelingsNavn(ChangeEventArgs e)
    {
        var x = e.Value.ToString();
        if (!string.IsNullOrEmpty(x))
        {
            vagtList = (await VagtService.GetAllVagts())
                            .Where(v => v.Afdelingsnavn == x)
                            .OrderByDescending(v => v.Priority)
                            .ToList();
        }
        else
        {
            vagtList = (await VagtService.GetAllVagts())
                            .OrderByDescending(v => v.Priority)
                            .ToList();
        }
    }

    // Gør at vagt får værdien FID = 0 når der klikkes på fjern.
    private async Task FjernVagtFromRightBox(Vagt vagt)
    {
        vagt.FID = 0;
        await VagtService.UpdateVagt(vagt);
    }

    //  Returnerer "priority" for sand og en tom streng for falsk.
    private string GetPriorityClass(bool? priority)
    {
        if (priority.HasValue)
        {
            return priority.Value ? "priority" : "";
        }

        return "";
    }

    // Returnerer "Prioriteret" for sand og "Ikke Prioriteret" for falsk.
    // Returnerer "Vagt opretet uden om systemet", hvis prioriteten er oprettet uden for systemet altså gennem databasen. 
    private string GetPriorityText(bool? priority)
    {
        if (priority.HasValue)
        {
            return priority.Value ? "Prioriteret" : "Ikke Prioriteret";
        }
        return "Vagt opretet uden om systemet";

    }
    // Logger User ud og sender en ud på /login
    private void HandleLogout()
    {
        localStore.RemoveItemAsync("loggedInUser");
        NavManager.NavigateTo("/login", true);
    }
}
